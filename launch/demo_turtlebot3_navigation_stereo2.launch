<!-- demo_turtlebot3_navigation_stereo2.launch -->
<launch>
  <!--
    Gazebo Turtlebot3/burger and Rtabmap_ros with Stero Camera
    $ sudo apt install ros-melodic-turtlebot3* ros-melodic-dwa-local-planner
    To avoid TF warning about leading '/' in frame name, remove it in:
       - "/opt/ros/melodic/share/turtlebot3_navigation/param/global_costmap_params.yaml"
       - "/opt/ros/melodic/share/turtlebot3_navigation/param/local_costmap_params.yaml"

    Example Gazebo:
      1)
       $ export TURTLEBOT3_MODEL=burger
       //$ roslaunch turtlebot3_gazebo turtlebot3_world.launch
       //$ roslaunch turtlebot3_gazebo turtlebot3_house.launch
       $ roslaunch turtlebot3_gazebo turtlebot3_world_nav_nishi2.launch gass:=true
       // turtlebot3/turtlebot3_description/urdf/turtleboot3_burger.urdf.xacro  ここに記述されている。
       //  末尾の stereo_camera_macro を有効にする事

      2)
       $ export TURTLEBOT3_MODEL=burger
       $ roslaunch rtabmap_ros_my demo_turtlebot3_navigation_stereo2.launch SBC:=true [localization:=true]

      3)
       $ export TURTLEBOT3_MODEL=burger
       $ roslaunch rtabmap_ros_my demo_turtlebot3_navigation_stereo2.launch PC:=true [localization:=true]

      4) run multi_goals4_cmd_vel
       $ export TURTLEBOT3_MODEL=burger
       $ roslaunch rtabmap_ros_my demo_turtlebot3_navigation_stereo2.launch robo_navi:=true [localization:=true]


      5) PC
       $ rosrun turtlebot3_navi_my multi_goals4.py
       $ rosrun turtlebot3_navi_my multi_goals4_cmd_vel.py
       $ rosrun turtlebot3_navi_my cmd_vel2.py
      6) PC
       $ roslaunch turtlebot3_teleop turtlebot3_teleop_key.launch
      7) PC
       $ rosrun turtlebot3_navi_my mower_robo4.py
      8) PC
       $ rosrun turtlebot3_navi_my drive_base

  -->

  <!-- Arguments -->
  <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="open_rviz" default="false"/>
  <arg name="rtabmapviz" default="false"/>
  <arg name="rviz_nishi" default="true"/>
  <arg name="rviz_tb" default="false"/>
  <arg name="move_forward_only" default="false"/>

  <arg name="SBC" default="false"/>
  <arg name="SBCX" default="false"/>
  <arg name="PC" default="false"/>

  <arg name="stereo_sync" default="true" />

  <arg name="move_base" default="false"/>
  <arg name="move_navigation" default="false"/>
  <arg name="robo_navi" default="false"/>

  <arg name="with_camera" default="true"/>
  <arg name="localization" default="false"/>
  <arg name="database_path" default="~/.ros/demo_rtabmap.db"/>
  <arg     if="$(arg localization)" name="rtabmap_args" default=""/>
  <arg unless="$(arg localization)" name="rtabmap_args" default="-d"/>

   <arg name="fusion" default="false"/>
   <arg name="obstacles" default="false"/>

   <arg name="BASE_LINK" default="base_link"/>


  <arg name="simulation"        default="true"/>
  <arg     if="$(arg simulation)" name="rgb_topic"   default="/camera/rgb/image_raw"/>
  <arg unless="$(arg simulation)" name="rgb_topic"   default="/camera/rgb/image_rect_color"/>
  <arg     if="$(arg simulation)" name="depth_topic" default="/camera/depth/image_raw"/>
  <arg unless="$(arg simulation)" name="depth_topic" default="/camera/depth_registered/image_raw"/>
  <arg name="camera_info_topic" default="/camera/rgb/camera_info"/>

  <!-- /stereo_camera/left/image_raw -->
  <!-- /stereo_camera/left/camera_info --> 
  <!-- /stereo_camera/right/image_raw -->
  <!-- /stereo_camera/right/camera_info -->

  <arg name="wait_for_transform"  default="0.2"/> 

  <arg name="test1" default="false"/>


  <!-- <arg name="prog" default="multi_goals4_cmd_vel"/> -->
  <arg name="prog" default="turtlebot3_navi_my_map_builder"/>

  <group if="$(arg SBC)">
      <!-- 180[d] -->
      <arg name="pi/2" value="1.5707963267948966" />
      <!-- <arg name="optical_rotate" value="0 0 0 -$(arg pi/2) 0 -$(arg pi/2)" /> -->
      <arg name="optical_rotate" value="0 0.003 0.19 -$(arg pi/2) 0 -$(arg pi/2)" />
      <node pkg="tf" type="static_transform_publisher" name="camera_base_link"
         args="$(arg optical_rotate) $(arg BASE_LINK) source_frame 30" />  
      <!-- <node pkg="tf" type="static_transform_publisher" name="camera2_base_link"
            args="0 0 0 0 0 0 stereo_camera source_frame 30" /> -->
      <!-- <node pkg="tf" type="static_transform_publisher" name="camera3_base_link"
            args="0 0 0 0 0 0 source_frame camera 30" /> -->
      <node pkg="tf" type="static_transform_publisher" name="camera3_base_link"
            args="0 0 0 0 0 0 source_frame stereo_camera_optical_frame 30" /> 
  </group>

  <group if="$(arg test1)">
      <!-- 180[d] -->
      <arg name="pi/2" value="1.5707963267948966" />
      <!-- <arg name="optical_rotate" value="0 0 0 -$(arg pi/2) 0 -$(arg pi/2)" /> -->
      <arg name="optical_rotate" value="0 0.003 0.19 -$(arg pi/2) 0 -$(arg pi/2)" />
      <node pkg="tf" type="static_transform_publisher" name="camera_base_link"
         args="$(arg optical_rotate) $(arg BASE_LINK) stereo_camera 100" />  
      <node pkg="tf" type="static_transform_publisher" name="camera2_base_link"
            args="0 0 0 0 0 0 stereo_camera source_frame 100" /> 
      <!-- <node pkg="tf" type="static_transform_publisher" name="camera3_base_link"
            args="0 0 0 0 0 0 source_frame camera 100" /> -->
      <node pkg="tf" type="static_transform_publisher" name="camera3_base_link"
            args="0 0 0 0 0 0 source_frame stereo_camera_optical_frame 100" /> 
  </group>

   <group if="$(arg test1)">
      <arg name="pi/2" value="1.5707963267948966" />
      <arg name="optical_rotate" value="0 0 0 -$(arg pi/2) 0 -$(arg pi/2)" />
      <node pkg="tf" type="static_transform_publisher" name="camera_base_link"
         args="$(arg optical_rotate) base_footprint stereo_camera 100" />  
      <node pkg="tf" type="static_transform_publisher" name="camera2_base_link"
            args="0 0 0 0 0 0 stereo_camera camera 100" /> 
      <node pkg="tf" type="static_transform_publisher" name="camera3_base_link"
            args="0 0 0 0 0 0 camera source_frame 100" /> 
      <node pkg="tf" type="static_transform_publisher" name="camera4_base_link"
            args="0 0 0 0 0 0 source_frame stereo_camera_optical_frame 100" /> 
   </group>

  <!-- Turtlebot3 -->
  <include if="$(arg PC)" file="$(find turtlebot3_bringup)/launch/turtlebot3_remote.launch">
    <arg name="model" value="$(arg model)" />
  </include>

  <group if="$(arg SBC)">
    <node name="stereo_image_proc" pkg="stereo_image_proc" type="stereo_image_proc" ns="/stereo_camera">
        <remap from="left/image_raw" to="left/image_raw" />
        <remap from="left/camera_info" to="left/camera_info" />
        <remap from="right/image_raw" to="right/image_raw" />
        <remap from="right/camera_info" to="right/camera_info" />
        <!-- <param name="disparity_range" value="128"/> -->
        <!-- <param name="min_disparity" value="0"/> -->  <!-- default = 0 で OK -->

    </node>>

    <node pkg="nodelet" type="nodelet" name="camera_process" args="manager" output="screen"/>

    <node if="$(arg stereo_sync)" pkg="nodelet" type="nodelet" name="stereo_sync" args="load rtabmap_ros/stereo_sync /camera_process">
        <remap from="left/image_rect"   to="/stereo_camera/left/image_rect_color"/>
        <remap from="right/image_rect"   to="/stereo_camera/right/image_rect_color"/>
        <remap from="left/camera_info"   to="/stereo_camera/left/camera_info"/>
        <remap from="right/camera_info"   to="/stereo_camera/right/camera_info"/>
    </node>

		<!-- Create point cloud for the planner -->
		<node pkg="nodelet" type="nodelet" name="disparity2cloud" args="load rtabmap_ros/point_cloud_xyz /camera_process">
			<remap from="disparity/image"       to="/stereo_camera/disparity"/>
			<remap from="disparity/camera_info" to="/stereo_camera/right/camera_info"/>
			<remap from="cloud"                 to="cloudXYZ"/>
			
			<param name="voxel_size" type="double" value="0.05"/>
			<param name="decimation" type="int" value="4"/>
			<param name="max_depth" type="double" value="4"/>
		</node>

		<node if="$(arg obstacles)" pkg="nodelet" type="nodelet" name="obstacles_detection" args="load rtabmap_ros/obstacles_detection /camera_process">
    		<remap from="cloud" to="cloudXYZ"/>
			<remap from="obstacles" to="/planner_cloud"/>
			<param name="frame_id" type="string" value="base_footprint"/>		
			<param name="map_frame_id" type="string" value="map"/>
			<param name="wait_for_transform" type="bool" value="true"/>
			<param name="Grid/MinClusterSize" type="int" value="20"/>
			<param name="Grid/MaxObstacleHeight" type="double" value="0.0"/>
  		</node>
  </group>

  <group if="$(arg SBC)" ns="rtabmap">   
    <!-- Visual SLAM: args: "delete_db_on_start" and "udebug" -->
    <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="$(arg rtabmap_args)">
        <param name="database_path"       type="string" value="$(arg database_path)"/>
        <param if="$(arg fusion)" name="frame_id" type="string" value="$(arg BASE_LINK)" />
        <param unless="$(arg fusion)" name="frame_id" type="string" value="base_link" />

        <param unless="$(arg stereo_sync)" name="subscribe_stereo" type="bool" value="true"/>
        <param name="subscribe_depth"  type="bool" value="false"/>
        <param if="$(arg stereo_sync)" name="subscribe_rgbd"      type="bool" value="true"/>
        <param name="subscribe_odom_info" type="bool"   value="false"/>
        <param name="subscribe_rgb"      type="bool" value="false"/>
        
        <!-- <param name="approx_sync"      type="bool" value="true"/> -->
        <param name="approx_sync"      type="bool" value="true"/>
        <!-- <param name="stereo_approx_sync"      type="bool" value="true"/> -->

        <remap unless="$(arg stereo_sync)" from="left/image_rect"   to="/stereo_camera/left/image_rect_color"/>
        <remap unless="$(arg stereo_sync)" from="right/image_rect"  to="/stereo_camera/right/image_rect_color"/>
        <remap unless="$(arg stereo_sync)" from="left/camera_info"  to="/stereo_camera/left/camera_info"/>
        <remap unless="$(arg stereo_sync)" from="right/camera_info" to="/stereo_camera/right/camera_info"/>
        <remap if="$(arg stereo_sync)" from="rgbd_image"        to="/rgbd_image"/>

        <param name="queue_size" type="int" value="30"/>
        <!-- <param name="map_negative_poses_ignored" type="bool" value="true"/> -->
        <!-- <param name="map_always_update" type="bool" value="false"/> -->
        <param name="map_always_update" type="bool" value="true"/>
        
        <!-- add by nishi 2022.1.15 -->
        <param name="RGBD/AngularUpdate"           type="string" value="0.1"/>    <!-- Update map only if the robot is moving -->
        <param name="RGBD/LinearUpdate"            type="string" value="0.1"/>    <!-- Update map only if the robot is moving -->

        <!-- use actionlib to send goals to move_base --> 
        <param name="use_action_for_goal" type="bool" value="true"/>
        <remap from="move_base"            to="/move_base"/>

        <!--  ~tf_delay (double, default: 0.05) -->
        <!-- <param name="tf_delay" type="double" value="0.8"/> -->

        <!-- <param name="Stereo/MinDisparity"     type="string" value="0.5"/> -->
        <param name="Stereo/MinDisparity"     type="string" value="5"/>   <!-- 2022.7.13 -->
        <!-- <param if="$(arg localization)" name="Stereo/MinDisparity"     type="string" value="5"/> -->
        <!-- <param unless="$(arg localization)" name="Stereo/MinDisparity"     type="string" value="70"/> -->
        <!-- <param unless="$(arg localization)" name="Stereo/MinDisparity"     type="string" value="5"/> -->
        <!-- <param name="Stereo/MaxDisparity"     type="string" value="128"/> -->
        <!-- <param name="Stereo/MaxDisparity"     type="string" value="800"/> -->
        <!-- <param name="Stereo/MaxDisparity"     type="string" value="2000"/> -->
        <param name="Stereo/MaxDisparity"     type="string" value="9000"/>

        <!-- inputs -->
        <remap if="$(arg fusion)" from="odom"     to="/fusion/odom"/>
        <remap unless="$(arg fusion)" from="odom" to="/odom"/>

        <!-- localization mode -->
        <param     if="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="false"/>
        <param unless="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="true"/>

        <!-- output -->
        <remap from="grid_map" to="/map"/>
        <!-- <remap from="proj_map" to="/map"/> -->

        <!-- RTAB-Map's parameters -->
        <!-- <param name="Rtabmap/TimeThr"                   type="string" value="700"/> -->
        <param name="Rtabmap/TimeThr"                   type="string" value="0"/>
        <param name="Grid/DepthDecimation"              type="string" value="4"/>
        <param name="Grid/FlatObstacleDetected"         type="string" value="true"/>


        <!-- <param name="Kp/MaxDepth"                       type="string" value="0"/> -->
        <param name="Kp/MaxDepth"                       type="string" value="3.5"/>
        <!-- <param name="Kp/DetectorStrategy"               type="string" value="1"/> -->    <!-- SHIFT -->
        <!-- <param name="Vis/FeatureType"                   type="string" value="1"/> -->  <!-- SHIFT -->
        <!-- <param name="Kp/DetectorStrategy"               type="string" value="2"/> -->   <!-- ORB -->
        <!-- <param name="Kp/DetectorStrategy"               type="string" value="5"/> -->  <!-- GFTT/FREAK -->
        <!-- <param name="Vis/FeatureType"                   type="string" value="5"/> -->  <!-- GFTT/FREAK -->
        <!-- <param name="Kp/DetectorStrategy"               type="string" value="6"/> -->  <!-- default GFTT/BRIEF -->
        <!-- <param name="Vis/FeatureType"                   type="string" value="6"/> -->  <!-- default GFTT/BRIEF -->
        <param name="Kp/DetectorStrategy"               type="string" value="8"/>    <!-- soso! GFTT/ORB -->
        <param name="Vis/FeatureType"                   type="string" value="8"/>   <!-- soso! GFTT/ORB -->
        <!-- <param name="Kp/DetectorStrategy"               type="string" value="9"/> -->  <!-- soso! KAZE -->
        <!--- <param name="Kp/DetectorStrategy"               type="string" value="10"/> -->  <!-- not good ORB-OCTREE -->
        <!-- <param name="Vis/EstimationType"                type="string" value="1"/> -->  <!-- 0=3D->3D, 1=3D->2D (PnP) -->
        <param name="Vis/EstimationType"                type="string" value="1"/>   <!-- 0=3D->3D, 1=3D->2D (PnP) -->
        <!-- <param name="Vis/MaxDepth"                      type="string" value="0"/> -->
        <param name="Vis/MaxDepth"                      type="string" value="3.5"/>
        <param name="RGBD/CreateOccupancyGrid"          type="string" value="true"/>   

        <!-- add by nishi --> 
        <!-- <param name="RGBD/StartAtOrigin"        type="string" value="true"/> -->   <!-- start from at Map(0,0,0) origin position -->
        <!-- <param name="Reg/Strategy"                 type="string" value="1"/> -->
        <!-- https://github.com/introlab/rtabmap/issues/418 -->
        <!-- <param name="odom_frame_id" value="odom"/> --> <!-- adjust to actual odometry frame id -->
        <!-- <param name="odom_tf_linear_variance" value="0.0001"/> --> <!-- adjust depending on real odom error -->
        <!-- <param name="odom_tf_angular_variance" value="0.0005"/> --> <!-- adjust depending on real odom error -->
        <!-- <param name="RGBD/OptimizeMaxError"          type="string" value="3.0"/> -->
        <!-- <param name="RGBD/OptimizeMaxError"          type="string" value="3.1"/> -->
        <!-- <param name="RGBD/OptimizeMaxError"          type="string" value="3.3"/> -->
        <!-- <param name="RGBD/OptimizeMaxError"          type="string" value="3.4"/> -->
        <param name="RGBD/OptimizeMaxError"          type="string" value="3.5"/>  <!-- 2022.5.22まで使用 -->
        <param name="RGBD/LinearUpdate"          type="string" value="0"/>

        <!-- <param name="proj_max_ground_angle" value="15"/> -->     <!-- Grid/MaxGroundAngle に変わった-->
        <!-- <param name="Grid/MaxGroundAngle" value="20"/> --> <!-- 上下画角の 上の角度 -->
        <!-- <param name="Grid/MaxGroundAngle" value="30"/> --> <!-- 上下画角の 上の角度 -->
        <!-- <param name="Grid/MaxGroundAngle" value="35"/> -->  <!-- 上下画角の 上の角度 -->
        <param name="Grid/MaxGroundAngle" value="38"/>  <!-- 上下画角の 上の角度 2022.7.13 -->
        <param name="Grid/MaxObstacleHeight" type="string" value="1.0"/>    <!-- default 0.0 2022.7.13 -->

        <!-- <param name="Grid/MinGroundHeight" type="string" value="0.0"/> -->   <!-- default 0.0 2022.7.13 -->
        <param name="Grid/MinGroundHeight" type="string" value="0.05"/>   <!-- default 0.0 2022.7.13 -->
        <!-- <param name="Grid/MaxGroundHeight" type="string" value="0.02"/> -->   <!-- default 0.0 2022.7.13 -->

        <!-- Grid, GroundIsObstacle -->
        <!-- <param name="Grid/GroundIsObstacle" type="bool" value="true"/> -->

        <!-- <param name="Odom/Strategy" value="1"/>  NG -->
        <param name="Odom/FilteringStrategy" value="1"/>   <!-- default=0 0=No filtering 1=Kalman filtering 2=Particle filtering. This filter is used to smooth the odometry output. -->
        <param name="Odom/ParticleSize" value="380"/>   <!-- default=400 -->
        <!--
        <param name="wait_imu_to_init" type="bool" value="true"/>
        <remap from="imu"  to="/imu"/>
        -->

        <!-- <param name="Reg/Force3DoF" value="true"/> -->
        <!-- <param name="Optimizer/Slam2D" value="true" /> -->   <!--  これは、無いみたい。 Reg/Force3DoF に置き換わるとの事 -->
    </node>
  </group>

  <!-- move_base -->
  <group if="$(arg PC)" >

    <!-- move_base -->
    <include if="$(arg move_base)" file="$(find turtlebot3_navi_my)/launch/move_base_foxbot.launch">
      <arg name="model" value="$(arg model)" />
      <arg name="move_forward_only" value="$(arg move_forward_only)"/>
      <!-- odom を変えられみたい。-->
      <arg if="$(arg fusion)" name="odom_topic" value="/fusion/odom" />
      <arg unless="$(arg fusion)" name="odom_topic" value="/odom_fox" />
      <arg name="EBAND" value="false" />
    </include>

    <!-- move_navigation -->
    <node if="$(arg move_navigation)" pkg="turtlebot3_navi_my" type="turtlebot3_navi_my_move_navigation" name="turtlebot3_navi_my_move_navigation" output="screen">
        <rosparam command="load" file="$(find turtlebot3_navi_my)/param_demo_stereo/move_navigation_point_cloud2.yaml" />
    </node>

    <!-- rviz -->
    <node if="$(arg open_rviz)" pkg="rviz" type="rviz" name="rviz" required="true"
            args="-d $(find turtlebot3_navigation)/rviz/turtlebot3_navigation.rviz"/>
    <node if="$(arg rviz_nishi)" pkg="rviz" type="rviz" name="rviz" args="-d $(find rtabmap_ros_my)/launch/config/nishi-stereoB-navi.rviz"/>
    <node if="$(arg rviz_tb)" name="rviz" pkg="rviz" type="rviz" args="-d $(find rtabmap_ros)/launch/config/turtlebot_navigation.rviz"/>
  </group>

  <group if="$(arg robo_navi)" >
    <!-- move_navigation -->
    <node pkg="turtlebot3_navi_my" type="$(arg prog)" name="$(arg prog)" output="screen">
        <rosparam command="load" file="$(find turtlebot3_navi_my)/param_demo_stereo/$(arg model)_move_navigation_point_cloud2.yaml" />
    </node>
  </group> 

</launch>
