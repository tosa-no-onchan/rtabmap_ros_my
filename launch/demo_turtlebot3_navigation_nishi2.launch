<!-- demo_turtlebot3_navigation_nishi2.launch -->
<launch>
  <!--
    Gazebo Turtlebot3/waffle and Rtabmap_ros with rgbd-camera
    $ sudo apt install ros-melodic-turtlebot3* ros-melodic-dwa-local-planner
    To avoid TF warning about leading '/' in frame name, remove it in:
       - "/opt/ros/melodic/share/turtlebot3_navigation/param/global_costmap_params.yaml"
       - "/opt/ros/melodic/share/turtlebot3_navigation/param/local_costmap_params.yaml"

    Example Gazebo:
    I.
      1)
       $ export TURTLEBOT3_MODEL=waffle or burger
       //$ roslaunch turtlebot3_gazebo turtlebot3_world.launch
       //$ roslaunch turtlebot3_gazebo turtlebot3_house.launch
       $ roslaunch turtlebot3_gazebo turtlebot3_world_nav_nishi2.launch gass:=true
       // turtlebot3/turtlebot3_description/urdf/turtleboot3_waffle.urdf.xacro  ここに記述されている。

      2)
       $ export TURTLEBOT3_MODEL=waffle or burger
       $ roslaunch rtabmap_ros_my demo_turtlebot3_navigation_nishi2.launch SBC:=true [localization:=true]

      3)
       $ export TURTLEBOT3_MODEL=waffle or burger
       $ roslaunch rtabmap_ros_my demo_turtlebot3_navigation_nishi2.launch PC:=true [localization:=true]


      4) run multi_goals4_cmd_vel
       $ export TURTLEBOT3_MODEL=waffle or burger
       $ roslaunch rtabmap_ros_my demo_turtlebot3_navigation_nishi2.launch robo_navi:=true [localization:=true]

      5) PC
       $ rosrun turtlebot3_navi_my multi_goals4.py
       $ rosrun turtlebot3_navi_my multi_goals4_cmd_vel.py
       $ rosrun turtlebot3_navi_my cmd_vel2.py
      6) PC
       $ roslaunch turtlebot3_teleop turtlebot3_teleop_key.launch
      7) PC
       $ rosrun turtlebot3_navi_my mower_robo4.py
       
      8) PC
       $ rosrun turtlebot3_navi_my drive_base
       $ rosrun turtlebot3_navi_my multi_goals4_cmd_vel
      

    II. how to run multi_goals4_move_base
      1)
       $ export TURTLEBOT3_MODEL=waffle or burger
       //$ roslaunch turtlebot3_gazebo turtlebot3_world.launch
       //$ roslaunch turtlebot3_gazebo turtlebot3_house.launch
       $ roslaunch turtlebot3_gazebo turtlebot3_world_nav_nishi2.launch gass:=true
       // turtlebot3/turtlebot3_description/urdf/turtleboot3_waffle.urdf.xacro  ここに記述されている。

      2)
       $ export TURTLEBOT3_MODEL=waffle or burger
       $ roslaunch rtabmap_ros_my demo_turtlebot3_navigation_nishi2.launch SBC:=true move_base:=true [localization:=true]

      3)
       $ export TURTLEBOT3_MODEL=waffle or burger
       $ roslaunch rtabmap_ros_my demo_turtlebot3_navigation_nishi2.launch PC:=true move_base:=true [localization:=true]

      4) PC
       $ rosrun turtlebot3_navi_my multi_goals4_move_base

      Debug
       $ cd ~/catkin_ws
       $ gdb devel/lib/turtlebot3_navi_my/multi_goals4_move_base
       (gdb) run
       (gdb) bt
       (gdb) quit

  -->

  <!-- Arguments -->
  <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="open_rviz" default="false"/>
  <arg name="rtabmapviz" default="false"/>
  <arg name="rviz_nishi" default="true"/>
  <arg name="rviz_tb" default="false"/>
  <arg name="move_forward_only" default="false"/>

  <arg name="SBC" default="false"/>
  <arg name="PC" default="false"/>
  <arg name="move_base" default="false"/>
  <arg name="move_navigation" default="false"/>
  <arg name="robo_navi" default="false"/>

  <arg name="not_run" default="false"/>

  <arg name="with_camera" default="true"/>
  <arg name="localization" default="false"/>
  <arg name="database_path" default="~/.ros/rtabmap.db"/>
  <arg     if="$(arg localization)" name="rtabmap_args" default=""/>
  <arg unless="$(arg localization)" name="rtabmap_args" default="-d"/>

  <arg name="BASE_LINK" default="base_link"/>
  <arg name="dwa" default="false"/>
  <arg name="eband" default="true"/>
  <arg name="teb" default="false"/>


  <arg name="simulation"        default="true"/>
  <arg     if="$(arg simulation)" name="rgb_topic"   default="/camera/rgb/image_raw"/>
  <arg unless="$(arg simulation)" name="rgb_topic"   default="/camera/rgb/image_rect_color"/>
  <arg     if="$(arg simulation)" name="depth_topic" default="/camera/depth/image_raw"/>
  <arg unless="$(arg simulation)" name="depth_topic" default="/camera/depth_registered/image_raw"/>
  <arg name="camera_info_topic" default="/camera/rgb/camera_info"/>

  <arg name="wait_for_transform"  default="0.2"/> 

  <!-- <arg name="prog" default="multi_goals4_cmd_vel"/> -->
  <arg name="prog" default="turtlebot3_navi_my_map_builder"/>

  <!-- Turtlebot3 -->
  <include if="$(arg PC)" file="$(find turtlebot3_bringup)/launch/turtlebot3_remote.launch">
    <arg name="model" value="$(arg model)" />
  </include>

  <group if="$(arg SBC)">
    <node pkg="nodelet" type="nodelet" name="camera_process" args="manager" output="screen"/>

		<!-- Create point cloud for the planner -->
		<node pkg="nodelet" type="nodelet" name="disparity2cloud" args="load rtabmap_ros/point_cloud_xyz /camera_process">
			<!-- <remap from="disparity/image"       to="/stereo_camera/disparity"/>
			<remap from="disparity/camera_info" to="/stereo_camera/right/camera_info"/> -->

			<remap from="depth/image"       to="$(arg depth_topic)"/>
			<remap from="depth/camera_info" to="$(arg camera_info_topic)"/>

			<remap from="cloud"                 to="cloudXYZ"/>   <!-- frame_id: camera_rgb_optical_frame -->
			
			<param name="voxel_size" type="double" value="0.05"/>
			<param name="decimation" type="int" value="4"/>
			<param name="max_depth" type="double" value="4"/>
		</node>

  </group>

  <group if="$(arg SBC)" ns="rtabmap">
    <!--
    <node if="$(eval model=='waffle')" pkg="rtabmap_ros" type="rgbd_sync" name="rgbd_sync" output="screen">
      <remap from="rgb/image"         to="/camera/rgb/image_raw"/>
      <remap from="depth/image"       to="/camera/depth/image_raw"/>
      <remap from="rgb/camera_info"   to="/camera/rgb/camera_info"/>
    </node>
    -->
     
    <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="$(arg rtabmap_args)">
      <param name="database_path"       type="string" value="$(arg database_path)"/>
      <param name="frame_id"            type="string" value="base_footprint"/>
  	  <param name="wait_for_transform_duration"  type="double"   value="$(arg wait_for_transform)"/>
      <!-- <param name="subscribe_rgb"   type="bool" value="false"/> -->
  	  <param name="subscribe_depth"     type="bool"   value="true"/>
      <!--
      <param     if="$(eval model=='waffle')" name="subscribe_rgbd" type="bool" value="true"/>
      <param unless="$(eval model=='waffle')" name="subscribe_rgbd" type="bool" value="false"/>
      -->

      <!-- <param name="subscribe_scan"      type="bool"   value="true"/> -->
      <param name="subscribe_scan"      type="bool"   value="false"/>
      <!-- <param name="approx_sync"         type="bool"   value="true"/> -->

      <param name="queue_size" type="int" value="30"/>
      <!-- <param name="map_negative_poses_ignored" type="bool" value="true"/> -->
      <!-- <param name="map_always_update" type="bool" value="false"/> -->
      <param name="map_always_update" type="bool" value="true"/>

      <!-- use actionlib to send goals to move_base --> 
      <param name="use_action_for_goal" type="bool" value="true"/>
      <remap from="move_base"            to="/move_base"/>
	
      <!-- inputs -->
      <remap from="odom"            to="/odom"/>
      <remap from="scan"            to="/scan"/>
      <remap from="rgb/image"       to="$(arg rgb_topic)"/>
  	  <remap from="depth/image"     to="$(arg depth_topic)"/>
  	  <remap from="rgb/camera_info" to="$(arg camera_info_topic)"/>

      <!-- output -->
      <remap from="grid_map" to="/map"/>
	
      <!-- RTAB-Map's parameters -->
      <!-- <param name="Reg/Strategy"                 type="string" value="1"/> -->


      <!-- RTAB-Map's parameters: do "rosrun rtabmap rtabmap (double-dash)params" to see the list of available parameters. -->
      <param name="RGBD/ProximityBySpace"        type="string" value="true"/>   <!-- Local loop closure detection (using estimated position) with locations in WM -->
      <param name="RGBD/OptimizeFromGraphEnd"    type="string" value="false"/>  <!-- Set to false to generate map correction between /map and /odom -->
      <!-- <param name="Kp/MaxDepth"                  type="string" value="4.0"/> -->
      <param name="Kp/MaxDepth"                  type="string" value="5.0"/>
      <param name="Reg/Strategy"                 type="string" value="0"/>      <!-- Loop closure transformation: 0=Visual, 1=ICP, 2=Visual+ICP -->
      <param name="Icp/CorrespondenceRatio"      type="string" value="0.3"/>
      <param name="Vis/MinInliers"               type="string" value="15"/>      <!-- 3D visual words minimum inliers to accept loop closure -->
      <param name="Vis/InlierDistance"           type="string" value="0.1"/>    <!-- 3D visual words correspondence distance -->
      <param name="RGBD/AngularUpdate"           type="string" value="0.1"/>    <!-- Update map only if the robot is moving -->
      <param name="RGBD/LinearUpdate"            type="string" value="0.1"/>    <!-- Update map only if the robot is moving -->
      <param name="RGBD/ProximityPathMaxNeighbors" type="string" value="0"/> 
      <param name="Rtabmap/TimeThr"              type="string" value="0"/>
      <param name="Mem/RehearsalSimilarity"      type="string" value="0.30"/>
      <param name="Reg/Force3DoF"                type="string" value="true"/>
      <param name="GridGlobal/MinSize"           type="string" value="20"/>

      <!-- RGBD/OptimizeMaxError 3.0 -->
      <!-- <param name="RGBD/OptimizeMaxError"          type="string" value="3.3"/> -->  <!-- 2022.8.5 変更 -->

      <param name="Kp/DetectorStrategy"               type="string" value="8"/>   <!-- default -->
      <param name="Vis/FeatureType"                   type="string" value="8"/>   <!-- default -->

      <!-- add by nishi -->
      <param name="Grid/MaxObstacleHeight" type="string" value="1.0"/>    <!-- default 0.0 2022.7.13 -->
      <!-- <param name="Grid/DepthDecimation"   type="string" value="3"/> -->
      <!-- <param name="Grid/MinGroundHeight" type="string" value="0.05"/> NG -->  <!-- default 0.0 2022.8.5 -->


      <!-- localization mode -->
      <param     if="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="false"/>
      <param unless="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="true"/>
    </node>

    <!-- visualization with rtabmapviz -->
    <node if="$(arg rtabmapviz)" pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz" args="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" output="screen">
      <param name="subscribe_scan"   type="bool"   value="false"/>
      <param name="subscribe_odom"   type="bool"   value="true"/>
      <!-- <param name="subscribe_rgbd"   type="bool" value="true"/> -->
  	  <param name="subscribe_depth"     type="bool"   value="true"/>
      <param name="frame_id"         type="string" value="base_footprint"/>

      <param name="wait_for_transform_duration" type="double" value="$(arg wait_for_transform)"/>
      <!-- <param name="approx_sync"      type="bool"   value="true"/> -->

      <remap from="odom"            to="/odom"/>
      <remap from="rgb/image"       to="$(arg rgb_topic)"/>
      <remap from="depth/image"     to="$(arg depth_topic)"/>
      <remap from="rgb/camera_info" to="$(arg camera_info_topic)"/>
      <!-- <remap from="scan"            to="/scan"/> -->
    </node>
  </group>

  <!-- move_base -->
  <group if="$(arg PC)" >
    <include if="$(arg move_base)" file="$(find turtlebot3_navi_my)/launch/move_base_depth.launch">
      <arg name="model" value="$(arg model)" />
      <arg name="move_forward_only" value="$(arg move_forward_only)"/>
      <arg name="DWA" value="$(arg dwa)" />
      <arg name="EBAND" value="$(arg eband)" />
      <arg name="TEB" value="$(arg teb)" />
    </include>

    <!-- move_navigation -->
    <node if="$(arg move_navigation)" pkg="turtlebot3_navi_my" type="turtlebot3_navi_my_move_navigation" name="turtlebot3_navi_my_move_navigation" output="screen">
      <rosparam command="load" file="$(find turtlebot3_navi_my)/param_demo_depth/$(arg model)_move_navigation_point_cloud2.yaml" />
    </node>


    <!-- rviz -->
    <node if="$(arg open_rviz)" pkg="rviz" type="rviz" name="rviz" required="true"
            args="-d $(find turtlebot3_navigation)/rviz/turtlebot3_navigation.rviz"/>

    <node if="$(arg rviz_nishi)" pkg="rviz" type="rviz" name="rviz" args="-d $(find rtabmap_ros_my)/launch/config/nishi-stereoB-navi.rviz"/>
 
    <node if="$(arg rviz_tb)" name="rviz" pkg="rviz" type="rviz" args="-d $(find rtabmap_ros)/launch/config/turtlebot_navigation.rviz"/>

  </group>


  <group if="$(arg robo_navi)" >
    <!-- move_navigation -->
    <node pkg="turtlebot3_navi_my" type="$(arg prog)" name="$(arg prog)" output="screen">
        <rosparam command="load" file="$(find turtlebot3_navi_my)/param_demo_depth/$(arg model)_robo_navi_costmap.yaml" />
        <rosparam command="load" file="$(find turtlebot3_navi_my)/param_demo_depth/$(arg model)_robo_navi_TrajectoryPlanner.yaml" />
    </node>
  </group> 

</launch>
